{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","users","_this2","this","xhr","XMLHttpRequest","open","addEventListener","console","log","status","JSON","parse","response","setState","send","map","user","react_default","a","createElement","key","id","name","address","city","className","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4FeA,oNA/EbC,MAAQ,CACNC,MAAO,uFAGW,IAAAC,EAAAC,KAEZC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,8CAA8C,GAY9DF,EAAIG,iBAAiB,OAAQ,WAE3B,GADAC,QAAQC,IAAIL,EAAIM,QACG,MAAfN,EAAIM,OAAgB,CACtB,IAAMT,EAAQU,KAAKC,MAAMR,EAAIS,UAC7BL,QAAQC,IAAIR,GACZC,EAAKY,SAAS,CAAEb,aAIpBG,EAAIW,KAAK,uCAoBT,IAAMd,EAAQE,KAAKH,MAAMC,MAAMe,IAAI,SAAAC,GAAI,OACrCC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,IACbJ,EAAAC,EAAAC,cAAA,UAAKH,EAAKM,MACVL,EAAAC,EAAAC,cAAA,SAAIH,EAAKO,QAAQC,SAGrB,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,cAAd,iBACAR,EAAAC,EAAAC,cAAA,KAAGM,UAAU,mBAAb,8FAEyB,IACvBR,EAAAC,EAAAC,cAAA,KAAGM,UAAU,WAAWC,KAAK,wCAA7B,mBAHF,6BAM6B,IAC3BT,EAAAC,EAAAC,cAAA,KACEM,UAAU,WACVC,KAAK,4DAFP,wBAQJT,EAAAC,EAAAC,cAAA,WAAMnB,WAlFI2B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a0d9bfb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     users: []\n  //   }\n  //   this.requestData()\n  // }\n\n  state = {\n    users: []\n  };\n\n  componentDidMount() {\n    // this.requestData()\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"https://jsonplaceholder.typicode.com/users\", true);\n\n    // xhr.onload = () => {\n    //   console.log(xhr.status);\n    //   if (xhr.status === 200) {\n    //     const users = JSON.parse(xhr.response)\n    //     console.log(users);\n    //     this.setState({ users })\n    //   }\n    //   // console.log(typeof xhr.response);\n    // }\n\n    xhr.addEventListener(\"load\", () => {\n      console.log(xhr.status);\n      if (xhr.status === 200) {\n        const users = JSON.parse(xhr.response);\n        console.log(users);\n        this.setState({ users });\n      }\n    });\n\n    xhr.send(null);\n  }\n\n  // requestData() {\n  //   const xhr = new XMLHttpRequest();\n  //   xhr.open('GET', 'https://jsonplaceholder.typicode.com/users', true);\n\n  //   xhr.onload = () => {\n  //     console.log(xhr.status);\n  //     if (xhr.status === 200) {\n  //       const users = JSON.parse(xhr.response)\n  //       console.log(users);\n  //       this.setState({ users })\n  //     }\n  //     // console.log(typeof xhr.response);\n  //   }\n  //   xhr.send(null)\n  // }\n\n  render() {\n    const users = this.state.users.map(user => (\n      <div key={user.id}>\n        <h4>{user.name}</h4>\n        <p>{user.address.city}</p>\n      </div>\n    ));\n    return (\n      <div className=\"App\">\n        <div>\n          <h1 className=\"App-header\">AJAX REST API</h1>\n          <p className=\"App-description\">\n            Task to practise REST API and XMLHttpRequest - I used create-app and\n            AJAX to load file from{\" \"}\n            <a className=\"App-link\" href=\"https://jsonplaceholder.typicode.com\">\n              JSONPlaceholder\n            </a>\n            . You can find the code on{\" \"}\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/Krystian2017/AJAX-API-JSONPlaceholder\"\n            >\n              my GitHub account.\n            </a>\n          </p>\n        </div>\n        <div>{users}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}